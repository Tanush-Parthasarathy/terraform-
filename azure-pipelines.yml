trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: 'TerraformInitPlanApply'
  steps:
    - checkout: self

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: |
        # Navigate to your Terraform configuration directory
        cd $(Build.SourcesDirectory)/path/to/your/terraform/code

        # Specify the version of the Azure provider
        echo 'provider "azurerm" { version = "=2.0.0" }' > main.tf

        # Initialize Terraform
        terraform init

        # Validate Terraform configuration
        terraform validate

        # Remove existing plan file
        rm -f $(Build.ArtifactStagingDirectory)/tfplan

        # Create a new Terraform plan
        terraform plan -out $(Build.ArtifactStagingDirectory)/tfplan

      displayName: 'Terraform Init and Plan'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'terraform-artifact'
        publishLocation: 'pipeline'

- deployment: 'TerraformApply'
  dependsOn: 'TerraformInitPlanApply'
  pool:
    vmImage: 'ubuntu-latest'
  environment: 'YourEnvironmentName'
  strategy:
    runOnce:
      deploy:
        steps:
          - download: current
            artifact: 'terraform-artifact'
            displayName: 'Download Terraform Artifact'

          - script: |
              cd $(Pipeline.Workspace)
              ls -la
              ls -la terraform-artifact

              # Apply the Terraform plan
              terraform apply -auto-approve terraform-artifact/tfplan

            displayName: 'Terraform Apply'

          - script: |
              echo "Terraform Apply completed successfully."

            displayName: 'Terraform Apply Success Message'

          - script: |
              echo "Current Directory: $(pwd)"
              echo "Contents of Artifact Directory:"
              ls -la terraform-artifact

            displayName: 'Debugging Info'
