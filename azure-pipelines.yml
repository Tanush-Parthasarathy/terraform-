trigger:
- main  # Change this to your branch name if needed

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: 'TerraformInitPlan'
  steps:
  - checkout: self

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.x'
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - script: |
      cd $(Build.SourcesDirectory)/path/to/your/terraform/code
      terraform init
      terraform validate
      terraform plan -out $(Build.ArtifactStagingDirectory)/tfplan
    displayName: 'Terraform Init and Plan'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'terraform-artifact'
      publishLocation: 'pipeline'

- deployment: 'TerraformApply'
  dependsOn: 'TerraformInitPlan'
  pool:
    vmImage: 'ubuntu-latest'
  environment: 'YourEnvironmentName'  # Create an environment in Azure DevOps
  strategy:
    runOnce:
      deploy:
        steps:
        - download: current
          artifact: 'terraform-artifact'
          displayName: 'Download Terraform Artifact'

        - script: |
            cd $(Pipeline.Workspace)/terraform-artifact
            pwd  # Print the current working directory for debugging
            ls -la  # List contents of the artifact directory for debugging
            # Remove any existing plan files
            rm -f tfplan
            # Apply the Terraform plan using the full path
            terraform apply -auto-approve ./tfplan
            # Add error handling and cleanup steps here
          displayName: 'Terraform Apply'

        - script: |
            echo "Terraform Apply completed successfully."
          displayName: 'Terraform Apply Success Message'

        - script: |
            echo "Current Directory: $(pwd)"
            echo "Contents of Artifact Directory:"
            ls -la $(Pipeline.Workspace)/terraform-artifact
          displayName: 'Debugging Info'
